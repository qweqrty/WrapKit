{% for type in types.protocols where type.name|hasSuffix:"Output" %}

// sourcery:file:{{ type.path|dirname }}/Generated/{{ type.name }}MainQueueDispatchDecorator.swift

// Generated by Sourcery

{% for importName in type.allImports %}
import {{ importName }}
{% endfor %}

extension MainQueueDispatchDecorator: {{ type.name }} where T == {{ type.name }} {
    {% for method in type.methods %}
    public func {{ method.name }} {
        dispatch { [weak self] in
            self?.decoratee.{{ method.callName }}({% for param in method.parameters %}{{ param.argumentLabel }}: {{ param.name }}{% if not forloop.last %}, {% endif %}{% endfor %})
        }
    }
    {% endfor %}

    {% for variable in type.variables %}
    public var {{ variable.name }}: {{ variable.typeName }} {
        get {
            return DispatchQueue.main.sync {
                return self.decoratee.{{ variable.name }}
            }
        }
        set {
            dispatch { [weak self] in
                self?.decoratee.{{ variable.name }} = newValue
            }
        }
    }
    {% endfor %}
}

extension {{ type.name }} {
    public var mainQueueDispatched: {{ type.name }} {
        MainQueueDispatchDecorator(decoratee: self)
    }
}

extension {{ type.name }} {
    public var weakReferenced: {{ type.name }} {
        return WeakRefVirtualProxy(self)
    }
}

extension WeakRefVirtualProxy: {{ type.name }} where T: {{ type.name }} {
    {% for method in type.methods %}
    public func {{ method.name }} {
        object?.{{ method.callName }}({% for param in method.parameters %}{{ param.argumentLabel }}: {{ param.name }}{% if not forloop.last %}, {% endif %}{% endfor %})
    }
    {% endfor %}

    {% for variable in type.variables %}
    public var {{ variable.name }}: {{ variable.typeName }} {
        get { return object?.{{ variable.name }} }
        set { object?.{{ variable.name }} = newValue }
    }
    {% endfor %}
}

// sourcery:end
// sourcery:endfile

{% endfor %}
