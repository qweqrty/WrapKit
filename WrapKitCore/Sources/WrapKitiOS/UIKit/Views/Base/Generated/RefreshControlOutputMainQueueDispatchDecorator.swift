// Generated using Sourcery 2.2.5 â€” https://github.com/krzysztofzablocki/Sourcery
// DO NOT EDIT

// Generated by Sourcery

import Foundation

extension MainQueueDispatchDecorator: RefreshControlOutput where T: RefreshControlOutput {

    public func display(model: RefreshControlPresentableModel?) {
        dispatch { [weak self] in
            self?.decoratee.display(model: model)
        }
    }
    public func display(style: RefreshControlPresentableModel.Style) {
        dispatch { [weak self] in
            self?.decoratee.display(style: style)
        }
    }
    public func display(onRefresh: (() -> Void)?) {
        dispatch { [weak self] in
            self?.decoratee.display(onRefresh: onRefresh)
        }
    }
    public func display(isLoading: Bool) {
        dispatch { [weak self] in
            self?.decoratee.display(isLoading: isLoading)
        }
    }

}

extension RefreshControlOutput {
    public var mainQueueDispatched: any RefreshControlOutput {
        MainQueueDispatchDecorator(decoratee: self)
    }
}

extension RefreshControlOutput {
    public var weakReferenced: any RefreshControlOutput {
        return WeakRefVirtualProxy(self)
    }
}

extension WeakRefVirtualProxy: RefreshControlOutput where T: RefreshControlOutput {

    public func display(model: RefreshControlPresentableModel?) {
        object?.display(model: model)
    }
    public func display(style: RefreshControlPresentableModel.Style) {
        object?.display(style: style)
    }
    public func display(onRefresh: (() -> Void)?) {
        object?.display(onRefresh: onRefresh)
    }
    public func display(isLoading: Bool) {
        object?.display(isLoading: isLoading)
    }

}
