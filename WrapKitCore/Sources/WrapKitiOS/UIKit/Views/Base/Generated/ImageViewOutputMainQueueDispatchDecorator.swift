// Generated using Sourcery 2.2.5 â€” https://github.com/krzysztofzablocki/Sourcery
// DO NOT EDIT

// Generated by Sourcery

import Foundation

extension MainQueueDispatchDecorator: ImageViewOutput where T: ImageViewOutput {

    public func display(model: ImageViewPresentableModel?) {
        dispatch { [weak self] in
            self?.decoratee.display(model: model)
        }
    }
    public func display(image: ImageEnum) {
        dispatch { [weak self] in
            self?.decoratee.display(image: image)
        }
    }

    public var onPress: (() -> Void)? {
        get {
            return DispatchQueue.main.sync {
                return self.decoratee.onPress
            }
        }
        set {
            dispatch { [weak self] in
                self?.decoratee.onPress = newValue
            }
        }
    }
    public var onLongPress: (() -> Void)? {
        get {
            return DispatchQueue.main.sync {
                return self.decoratee.onLongPress
            }
        }
        set {
            dispatch { [weak self] in
                self?.decoratee.onLongPress = newValue
            }
        }
    }
}

extension ImageViewOutput {
    public var mainQueueDispatched: any ImageViewOutput {
        MainQueueDispatchDecorator(decoratee: self)
    }
}

extension ImageViewOutput {
    public var weakReferenced: any ImageViewOutput {
        return WeakRefVirtualProxy(self)
    }
}

extension WeakRefVirtualProxy: ImageViewOutput where T: ImageViewOutput {

    public func display(model: ImageViewPresentableModel?) {
        object?.display(model: model)
    }
    public func display(image: ImageEnum) {
        object?.display(image: image)
    }

    public var onPress: (() -> Void)? {
        get { return object?.onPress }
        set { object?.onPress = newValue }
    }
    public var onLongPress: (() -> Void)? {
        get { return object?.onLongPress }
        set { object?.onLongPress = newValue }
    }
}
