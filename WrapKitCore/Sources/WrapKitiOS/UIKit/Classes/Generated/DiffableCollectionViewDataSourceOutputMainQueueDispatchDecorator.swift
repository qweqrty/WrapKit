// Generated using Sourcery 2.2.5 â€” https://github.com/krzysztofzablocki/Sourcery
// DO NOT EDIT

// Generated by Sourcery

import Foundation

extension MainQueueDispatchDecorator: DiffableCollectionViewDataSourceOutput where T: DiffableCollectionViewDataSourceOutput {
    public typealias Model = T.Model

    public func display(model: DiffableCollectionViewDataSourcePresentableModel<Model>?) {
        dispatch { [weak self] in
            self?.decoratee.display(model: model)
        }
    }
    public func display(didSelectAt: ((IndexPath, Model) -> Void)?) {
        dispatch { [weak self] in
            self?.decoratee.display(didSelectAt: didSelectAt)
        }
    }
    public func display(configureCell: ((UICollectionView, IndexPath, Model) -> UICollectionViewCell)?) {
        dispatch { [weak self] in
            self?.decoratee.display(configureCell: configureCell)
        }
    }
    public func display(configureSupplementaryView: ((UICollectionView, String, IndexPath) -> UICollectionReusableView)?) {
        dispatch { [weak self] in
            self?.decoratee.display(configureSupplementaryView: configureSupplementaryView)
        }
    }
    public func display(onRetry: (() -> Void)?) {
        dispatch { [weak self] in
            self?.decoratee.display(onRetry: onRetry)
        }
    }
    public func display(showLoader: Bool) {
        dispatch { [weak self] in
            self?.decoratee.display(showLoader: showLoader)
        }
    }
    public func display(minimumLineSpacingForSectionAt: ((Int) -> CGFloat)?) {
        dispatch { [weak self] in
            self?.decoratee.display(minimumLineSpacingForSectionAt: minimumLineSpacingForSectionAt)
        }
    }
    public func display(loadNextPage: (() -> Void)?) {
        dispatch { [weak self] in
            self?.decoratee.display(loadNextPage: loadNextPage)
        }
    }
    public func display(sizeForItemAt: ((IndexPath) -> CGSize)?) {
        dispatch { [weak self] in
            self?.decoratee.display(sizeForItemAt: sizeForItemAt)
        }
    }
    public func display(didScrollTo: ((IndexPath) -> Void)?) {
        dispatch { [weak self] in
            self?.decoratee.display(didScrollTo: didScrollTo)
        }
    }
    public func display(didScrollViewDidScroll: ((UIScrollView) -> Void)?) {
        dispatch { [weak self] in
            self?.decoratee.display(didScrollViewDidScroll: didScrollViewDidScroll)
        }
    }
    public func display(didMoveItem: ((IndexPath, IndexPath) -> Void)?) {
        dispatch { [weak self] in
            self?.decoratee.display(didMoveItem: didMoveItem)
        }
    }
    public func display(items: [Model], at section: Int) {
        dispatch { [weak self] in
            self?.decoratee.display(items: items, at: section)
        }
    }
    public func display(items: [[Model]]) {
        dispatch { [weak self] in
            self?.decoratee.display(items: items)
        }
    }

}

extension DiffableCollectionViewDataSourceOutput {
    public var mainQueueDispatched: any DiffableCollectionViewDataSourceOutput {
        MainQueueDispatchDecorator(decoratee: self)
    }
}

extension DiffableCollectionViewDataSourceOutput {
    public var weakReferenced: any DiffableCollectionViewDataSourceOutput {
        return WeakRefVirtualProxy(self)
    }
}

extension WeakRefVirtualProxy: DiffableCollectionViewDataSourceOutput where T: DiffableCollectionViewDataSourceOutput {
    public typealias Model = T.Model

    public func display(model: DiffableCollectionViewDataSourcePresentableModel<Model>?) {
        object?.display(model: model)
    }
    public func display(didSelectAt: ((IndexPath, Model) -> Void)?) {
        object?.display(didSelectAt: didSelectAt)
    }
    public func display(configureCell: ((UICollectionView, IndexPath, Model) -> UICollectionViewCell)?) {
        object?.display(configureCell: configureCell)
    }
    public func display(configureSupplementaryView: ((UICollectionView, String, IndexPath) -> UICollectionReusableView)?) {
        object?.display(configureSupplementaryView: configureSupplementaryView)
    }
    public func display(onRetry: (() -> Void)?) {
        object?.display(onRetry: onRetry)
    }
    public func display(showLoader: Bool) {
        object?.display(showLoader: showLoader)
    }
    public func display(minimumLineSpacingForSectionAt: ((Int) -> CGFloat)?) {
        object?.display(minimumLineSpacingForSectionAt: minimumLineSpacingForSectionAt)
    }
    public func display(loadNextPage: (() -> Void)?) {
        object?.display(loadNextPage: loadNextPage)
    }
    public func display(sizeForItemAt: ((IndexPath) -> CGSize)?) {
        object?.display(sizeForItemAt: sizeForItemAt)
    }
    public func display(didScrollTo: ((IndexPath) -> Void)?) {
        object?.display(didScrollTo: didScrollTo)
    }
    public func display(didScrollViewDidScroll: ((UIScrollView) -> Void)?) {
        object?.display(didScrollViewDidScroll: didScrollViewDidScroll)
    }
    public func display(didMoveItem: ((IndexPath, IndexPath) -> Void)?) {
        object?.display(didMoveItem: didMoveItem)
    }
    public func display(items: [Model], at section: Int) {
        object?.display(items: items, at: section)
    }
    public func display(items: [[Model]]) {
        object?.display(items: items)
    }

}
