// Generated using Sourcery 2.2.5 â€” https://github.com/krzysztofzablocki/Sourcery
// DO NOT EDIT

// Generated by Sourcery

import Foundation

extension MainQueueDispatchDecorator: DiffableTableViewDataSourceOutput where T: DiffableTableViewDataSourceOutput {
    public typealias Model = T.Model
    public typealias SectionItem = T.SectionItem

    public func display(model: DiffableTableViewDataSourcePresentableModel<Model, SectionItem>?) {
        dispatch { [weak self] in
            self?.decoratee.display(model: model)
        }
    }
    public func display(didSelectAt: ((IndexPath, Model) -> Void)?) {
        dispatch { [weak self] in
            self?.decoratee.display(didSelectAt: didSelectAt)
        }
    }
    public func display(configureCell: ((UITableView, IndexPath, Model) -> UITableViewCell)?) {
        dispatch { [weak self] in
            self?.decoratee.display(configureCell: configureCell)
        }
    }
    public func display(configureFooter: (() -> UITableViewCell)?) {
        dispatch { [weak self] in
            self?.decoratee.display(configureFooter: configureFooter)
        }
    }
    public func display(viewForHeaderInSection: ((UITableView, Int) -> UIView)?) {
        dispatch { [weak self] in
            self?.decoratee.display(viewForHeaderInSection: viewForHeaderInSection)
        }
    }
    public func display(heightForHeaderInSection: ((Int) -> CGFloat)?) {
        dispatch { [weak self] in
            self?.decoratee.display(heightForHeaderInSection: heightForHeaderInSection)
        }
    }
    public func display(onRetry: (() -> Void)?) {
        dispatch { [weak self] in
            self?.decoratee.display(onRetry: onRetry)
        }
    }
    public func display(showLoader: Bool) {
        dispatch { [weak self] in
            self?.decoratee.display(showLoader: showLoader)
        }
    }
    public func display(loadNextPage: (() -> Void)?) {
        dispatch { [weak self] in
            self?.decoratee.display(loadNextPage: loadNextPage)
        }
    }
    public func display(heightForRowAt: ((IndexPath) -> CGFloat)?) {
        dispatch { [weak self] in
            self?.decoratee.display(heightForRowAt: heightForRowAt)
        }
    }
    public func display(didScrollViewDidScroll: ((UIScrollView) -> Void)?) {
        dispatch { [weak self] in
            self?.decoratee.display(didScrollViewDidScroll: didScrollViewDidScroll)
        }
    }
    public func display(didScrollViewDidEndDragging: ((UIScrollView, Bool) -> Void)?) {
        dispatch { [weak self] in
            self?.decoratee.display(didScrollViewDidEndDragging: didScrollViewDidEndDragging)
        }
    }
    public func display(didScrollViewDidEndDecelerating: ((UIScrollView) -> Void)?) {
        dispatch { [weak self] in
            self?.decoratee.display(didScrollViewDidEndDecelerating: didScrollViewDidEndDecelerating)
        }
    }
    public func display(defaultRowAnimation: UITableView.RowAnimation) {
        dispatch { [weak self] in
            self?.decoratee.display(defaultRowAnimation: defaultRowAnimation)
        }
    }
    public func display(items: [Model]?, at section: SectionItem?) {
        dispatch { [weak self] in
            self?.decoratee.display(items: items, at: section)
        }
    }
    public func display<Item: SectionedDiffableItem>(sectionedItems: [Item]?) {
        dispatch { [weak self] in
            self?.decoratee.display(sectionedItems: sectionedItems)
        }
    }
    public func display(header: SectionItem?, forItems items: [Model]?) {
        dispatch { [weak self] in
            self?.decoratee.display(header: header, forItems: items)
        }
    }

}

extension DiffableTableViewDataSourceOutput {
    public var mainQueueDispatched: any DiffableTableViewDataSourceOutput {
        MainQueueDispatchDecorator(decoratee: self)
    }
}

extension DiffableTableViewDataSourceOutput {
    public var weakReferenced: any DiffableTableViewDataSourceOutput {
        return WeakRefVirtualProxy(self)
    }
}

extension WeakRefVirtualProxy: DiffableTableViewDataSourceOutput where T: DiffableTableViewDataSourceOutput {
    public typealias Model = T.Model
    public typealias SectionItem = T.SectionItem

    public func display(model: DiffableTableViewDataSourcePresentableModel<Model, SectionItem>?) {
        object?.display(model: model)
    }
    public func display(didSelectAt: ((IndexPath, Model) -> Void)?) {
        object?.display(didSelectAt: didSelectAt)
    }
    public func display(configureCell: ((UITableView, IndexPath, Model) -> UITableViewCell)?) {
        object?.display(configureCell: configureCell)
    }
    public func display(configureFooter: (() -> UITableViewCell)?) {
        object?.display(configureFooter: configureFooter)
    }
    public func display(viewForHeaderInSection: ((UITableView, Int) -> UIView)?) {
        object?.display(viewForHeaderInSection: viewForHeaderInSection)
    }
    public func display(heightForHeaderInSection: ((Int) -> CGFloat)?) {
        object?.display(heightForHeaderInSection: heightForHeaderInSection)
    }
    public func display(onRetry: (() -> Void)?) {
        object?.display(onRetry: onRetry)
    }
    public func display(showLoader: Bool) {
        object?.display(showLoader: showLoader)
    }
    public func display(loadNextPage: (() -> Void)?) {
        object?.display(loadNextPage: loadNextPage)
    }
    public func display(heightForRowAt: ((IndexPath) -> CGFloat)?) {
        object?.display(heightForRowAt: heightForRowAt)
    }
    public func display(didScrollViewDidScroll: ((UIScrollView) -> Void)?) {
        object?.display(didScrollViewDidScroll: didScrollViewDidScroll)
    }
    public func display(didScrollViewDidEndDragging: ((UIScrollView, Bool) -> Void)?) {
        object?.display(didScrollViewDidEndDragging: didScrollViewDidEndDragging)
    }
    public func display(didScrollViewDidEndDecelerating: ((UIScrollView) -> Void)?) {
        object?.display(didScrollViewDidEndDecelerating: didScrollViewDidEndDecelerating)
    }
    public func display(defaultRowAnimation: UITableView.RowAnimation) {
        object?.display(defaultRowAnimation: defaultRowAnimation)
    }
    public func display(items: [Model]?, at section: SectionItem?) {
        object?.display(items: items, at: section)
    }
    public func display<Item: SectionedDiffableItem>(sectionedItems: [Item]?) {
        object?.display(sectionedItems: sectionedItems)
    }
    public func display(header: SectionItem?, forItems items: [Model]?) {
        object?.display(header: header, forItems: items)
    }

}
