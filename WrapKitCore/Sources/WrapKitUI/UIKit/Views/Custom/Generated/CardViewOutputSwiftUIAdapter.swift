// Generated using Sourcery 2.2.5 â€” https://github.com/krzysztofzablocki/Sourcery
// DO NOT EDIT
// Generated by Sourcery

import SwiftUI
public class CardViewOutputSwiftUIAdapter: ObservableObject, CardViewOutput {

    // Initializer
    public init(
    ) {
    }

    @Published public var displayModelState: DisplayModelState? = nil
    public struct DisplayModelState {
        public let model: CardViewPresentableModel?
    }
    public func display(model: CardViewPresentableModel?) {
        displayModelState = .init(
            model: model
        )
    }
    @Published public var displayStyleState: DisplayStyleState? = nil
    public struct DisplayStyleState {
        public let style: CardViewPresentableModel.Style?
    }
    public func display(style: CardViewPresentableModel.Style?) {
        displayStyleState = .init(
            style: style
        )
    }
    @Published public var displayTitleState: DisplayTitleState? = nil
    public struct DisplayTitleState {
        public let title: TextOutputPresentableModel?
    }
    public func display(title: TextOutputPresentableModel?) {
        displayTitleState = .init(
            title: title
        )
    }
    @Published public var displayLeadingImageState: DisplayLeadingImageState? = nil
    public struct DisplayLeadingImageState {
        public let leadingImage: ImageViewPresentableModel?
    }
    public func display(leadingImage: ImageViewPresentableModel?) {
        displayLeadingImageState = .init(
            leadingImage: leadingImage
        )
    }
    @Published public var displaySecondaryLeadingImageState: DisplaySecondaryLeadingImageState? = nil
    public struct DisplaySecondaryLeadingImageState {
        public let secondaryLeadingImage: ImageViewPresentableModel?
    }
    public func display(secondaryLeadingImage: ImageViewPresentableModel?) {
        displaySecondaryLeadingImageState = .init(
            secondaryLeadingImage: secondaryLeadingImage
        )
    }
    @Published public var displayTrailingImageState: DisplayTrailingImageState? = nil
    public struct DisplayTrailingImageState {
        public let trailingImage: ImageViewPresentableModel?
    }
    public func display(trailingImage: ImageViewPresentableModel?) {
        displayTrailingImageState = .init(
            trailingImage: trailingImage
        )
    }
    @Published public var displaySecondaryTrailingImageState: DisplaySecondaryTrailingImageState? = nil
    public struct DisplaySecondaryTrailingImageState {
        public let secondaryTrailingImage: ImageViewPresentableModel?
    }
    public func display(secondaryTrailingImage: ImageViewPresentableModel?) {
        displaySecondaryTrailingImageState = .init(
            secondaryTrailingImage: secondaryTrailingImage
        )
    }
    @Published public var displaySubTitleState: DisplaySubTitleState? = nil
    public struct DisplaySubTitleState {
        public let subTitle: TextOutputPresentableModel?
    }
    public func display(subTitle: TextOutputPresentableModel?) {
        displaySubTitleState = .init(
            subTitle: subTitle
        )
    }
    @Published public var displayValueTitleState: DisplayValueTitleState? = nil
    public struct DisplayValueTitleState {
        public let valueTitle: TextOutputPresentableModel?
    }
    public func display(valueTitle: TextOutputPresentableModel?) {
        displayValueTitleState = .init(
            valueTitle: valueTitle
        )
    }
    @Published public var displayBottomSeparatorState: DisplayBottomSeparatorState? = nil
    public struct DisplayBottomSeparatorState {
        public let bottomSeparator: CardViewPresentableModel.BottomSeparator?
    }
    public func display(bottomSeparator: CardViewPresentableModel.BottomSeparator?) {
        displayBottomSeparatorState = .init(
            bottomSeparator: bottomSeparator
        )
    }
    @Published public var displaySwitchControlState: DisplaySwitchControlState? = nil
    public struct DisplaySwitchControlState {
        public let switchControl: SwitchControlPresentableModel?
    }
    public func display(switchControl: SwitchControlPresentableModel?) {
        displaySwitchControlState = .init(
            switchControl: switchControl
        )
    }
    @Published public var displayOnPressState: DisplayOnPressState? = nil
    public struct DisplayOnPressState {
        public let onPress: (() -> Void)?
    }
    public func display(onPress: (() -> Void)?) {
        displayOnPressState = .init(
            onPress: onPress
        )
    }
    @Published public var displayOnLongPressState: DisplayOnLongPressState? = nil
    public struct DisplayOnLongPressState {
        public let onLongPress: (() -> Void)?
    }
    public func display(onLongPress: (() -> Void)?) {
        displayOnLongPressState = .init(
            onLongPress: onLongPress
        )
    }
}
