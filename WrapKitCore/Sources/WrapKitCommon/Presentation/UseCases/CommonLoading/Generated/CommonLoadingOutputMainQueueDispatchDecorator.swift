// Generated using Sourcery 2.2.5 â€” https://github.com/krzysztofzablocki/Sourcery
// DO NOT EDIT

// Generated by Sourcery

import Foundation
import UIKit

extension MainQueueDispatchDecorator: CommonLoadingOutput where T == CommonLoadingOutput {
    public func display(isLoading: Bool) {
        dispatch { [weak self] in
            self?.decoratee.display(isLoading: isLoading)
        }
    }
    public func NVActivityLoader(onView: UIView, type: NVActivityIndicatorType = .circleStrokeSpin, size: CGSize = .init(width: 80, height: 80), loadingViewColor: UIColor, wrapperViewColor: UIColor) {
        dispatch { [weak self] in
            self?.decoratee.NVActivityLoader(onView: onView, type: type, size: size, loadingViewColor: loadingViewColor, wrapperViewColor: wrapperViewColor)
        }
    }

    public var isLoading: Bool {
        get {
            return DispatchQueue.main.sync {
                return self.decoratee.isLoading
            }
        }
        set {
            dispatch { [weak self] in
                self?.decoratee.isLoading = newValue
            }
        }
    }
    public var weakReferenced: CommonLoadingOutput {
        get {
            return DispatchQueue.main.sync {
                return self.decoratee.weakReferenced
            }
        }
        set {
            dispatch { [weak self] in
                self?.decoratee.weakReferenced = newValue
            }
        }
    }
    public var mainQueueDispatched: CommonLoadingOutput {
        get {
            return DispatchQueue.main.sync {
                return self.decoratee.mainQueueDispatched
            }
        }
        set {
            dispatch { [weak self] in
                self?.decoratee.mainQueueDispatched = newValue
            }
        }
    }
}

extension CommonLoadingOutput {
    public var mainQueueDispatched: CommonLoadingOutput {
        MainQueueDispatchDecorator(decoratee: self)
    }
}

extension CommonLoadingOutput {
    public var weakReferenced: CommonLoadingOutput {
        return WeakRefVirtualProxy(self)
    }
}

extension WeakRefVirtualProxy: CommonLoadingOutput where T: CommonLoadingOutput {
    public func display(isLoading: Bool) {
        object?.display(isLoading: isLoading)
    }
    public func NVActivityLoader(onView: UIView, type: NVActivityIndicatorType = .circleStrokeSpin, size: CGSize = .init(width: 80, height: 80), loadingViewColor: UIColor, wrapperViewColor: UIColor) {
        object?.NVActivityLoader(onView: onView, type: type, size: size, loadingViewColor: loadingViewColor, wrapperViewColor: wrapperViewColor)
    }

    public var isLoading: Bool {
        get { return object?.isLoading }
        set { object?.isLoading = newValue }
    }
    public var weakReferenced: CommonLoadingOutput {
        get { return object?.weakReferenced }
        set { object?.weakReferenced = newValue }
    }
    public var mainQueueDispatched: CommonLoadingOutput {
        get { return object?.mainQueueDispatched }
        set { object?.mainQueueDispatched = newValue }
    }
}
