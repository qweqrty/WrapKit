{% for type in types.protocols where type.name|hasSuffix:"Output" %}
// sourcery:file:{{ type.path|dirname }}/Generated/{{ type.name }}SwiftUIAdapter.swift
// Generated by Sourcery
// swiftlint:disable:this file_name
// swiftlint:disable all
// swift-format-ignore-file
// swiftformat:disable all

#if canImport(WrapKit)
import WrapKit
{% for importName in type.allImports %}
#if canImport({{ importName }})
import {{ importName }}
#endif
#if canImport(SwiftUI)
import {{ importName }}
#endif
{% endfor %}
public class {{ type.name }}SwiftUIAdapter{% for associatedType in type.associatedTypes|sortedValuesByKeys %}{% if forloop.first %}<{% endif %}{{ associatedType.name }}{% if forloop.last %}>{% endif %}{% endfor %}: ObservableObject, {{ type.name }} {
    {% for variable in type.variables %}
        {% if variable.isOptional %}
        @Published public var {{ variable.name }}: {{ variable.typeName }} = nil
        {% else %}
        @Published public var {{ variable.name }}: {{ variable.typeName }}
        {% endif %}
    {% endfor %}

    // Initializer
    public init(
        {% for variable in type.variables %}
            {% if not variable.isOptional %}
            {{ variable.name }}: {{ variable.typeName }}{% if not forloop.last %},{% endif %}
            {% endif %}
        {% endfor %}
    ) {
        {% for variable in type.variables %}
            {% if not variable.isOptional %}
            self.{{ variable.name }} = {{ variable.name }}
            {% endif %}
        {% endfor %}
    }

    {% for method in type.methods %}
    {% if method.isStatic %}
    {% else %}
    @Published public var {{ method.callName }}{% for param in method.parameters %}{{ param.name|upperFirstLetter }}{% endfor %}State: {{ method.callName|upperFirstLetter }}{% for param in method.parameters %}{{ param.name|upperFirstLetter }}{% endfor %}State? = nil
    public struct {{ method.callName|upperFirstLetter }}{% for param in method.parameters %}{{ param.name|upperFirstLetter }}{% endfor %}State {
        {% for param in method.parameters %}
        public let {{ param.name }}: {{ param.typeName }}
        {% endfor %}
    }
    public func {{ method.name }} {
        {{ method.callName }}{% for param in method.parameters %}{{ param.name|upperFirstLetter }}{% endfor %}State = .init(
            {% for param in method.parameters %}
            {{ param.name }}: {{ param.name }}{% if not forloop.last %}, {% endif %}
            {% endfor %}
        )
    }
    {% endif %}
    {% endfor %}
}
#endif
// sourcery:end
// sourcery:endfile
{% endfor %}